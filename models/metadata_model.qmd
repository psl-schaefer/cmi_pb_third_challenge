---
title: "Metadata Models"
author: "Philipp Sven Lars Sch√§fer"
date: "`r format(Sys.time(), '%d %B, %Y')`"
editor: source
engine: knitr
---

# Packages

```{r}
suppressPackageStartupMessages({
  library(tidyverse)
  library(flextable)
  library(ggdark)
  library(magick)
})

knitr::opts_knit$set(output.dir = "./")

source(file.path("..", "src", "read_data.R"))
source(file.path("..", "src", "generate_targets.R"))
source(file.path("..", "src", "model.R"))
```

# Data

```{r}
input_dir = file.path("..", "data")
```

```{r}
meta_data <- read_harmonized_meta_data(input_dir)

experimental_data <- read_raw_experimental_data(input_dir)
experimental_data <- filter_experimental_data(meta_data, experimental_data)

meta_data <- filter_meta_data(meta_data, experimental_data)
wide_experimental_data <- generate_wide_experimental_data(experimental_data=experimental_data,
                                                 impute="zero")

celltype_meta <- read_celltype_meta(input_dir)
gene_meta <- read_gene_meta(input_dir)
protein_meta <- read_protein_meta(input_dir)
```

```{r}
target_list <- generate_all_targets(
  meta_data=meta_data,
  experimental_data=experimental_data,
  experimental_data_settings=experimental_data_settings,
  gene_meta=gene_meta)
str(target_list)
```

# Conclusions

- Estimating the predictive accuracy using cross-cohort train/test splits is probably much more trustworthy. Using OOB or LOOCV on the joint dataset probably overestimates the generalizability of the models for new cohorts (i.e. for the 2023 cohort).

- As shown in the previous challenges, using baseline values for the prediction of absolute numbers (tasks 1.1, 2.1, 3.1) works already very good. It will not be easy to beat this baseline.

- The metadata model for task 1.2 works quite well (when looking at the spearman correlation), whereas task 2.2 and 3.2 seem much more difficult.

# Questions

- In the cross-cohort setting, the predictions from 2022 -> 2021 are sometimes much better than 2021 -> 2022 (or the other way around). How can this be?

# Results

```{r}
task_meta <- list(
  task_11 = list(
    name = "task_11",
    header = "## Task 1.1",
    description = "Rank the individuals by IgG antibody levels against pertussis toxin (PT) that we detect in plasma 14 days post booster vaccinations."
  ),
  task_12 = list(
    name = "task_12",
    header = "## Task 1.2",
    description = "Rank the individuals by fold change of IgG antibody levels against pertussis toxin (PT) that we detect in plasma 14 days post booster vaccinations compared to titer values at day 0."
  ),
  task_21 = list(
    name = "task_21",
    header = "## Task 2.1",
    description = "Rank the individuals by predicted frequency of Monocytes on day 1 post boost after vaccination."
  ),
  task_22 = list(
    name = "task_22",
    header = "## Task 2.2",
    description = "Rank the individuals by fold change of predicted frequency of Monocytes on day 1 post booster vaccination compared to cell frequency values at day 0."
  ),
  task_31 = list(
    name = "task_31",
    header = "## Task 3.1",
    description = "Rank the individuals by predicted gene expression of CCL3 on day 3 post-booster vaccination."
  ),
  task_32 = list(
    name = "task_32",
    header = "## Task 3.2",
    description = "Rank the individuals by fold change of predicted gene expression of CCL3 on day 3 post booster vaccination compared to gene expression values at day 0."
  )
)
```

```{r results="asis"}
#| crop: true
RENDER <- TRUE

make_flextable <- function(x) {
  if (RENDER) {
    x %>%
      flextable() %>% 
      bg(., bg = "#333333", part = "all") %>%
      color(., color = "white", part = "all") %>%
      set_table_properties(., align = "left") %>%
      flextable_to_rmd(ft) %>%
      return()
  } else {
    return(x)
  }
}

for (task in task_meta) {
  #task <- task_meta[[1]]
  
  cat(task$header)
  cat("\n\n")
  cat(task$description)
  cat("\n\n")
  
  meta_data_covariates <- get_metadata_covariates(meta_data)

  model_df <- target_list[[task$name]] %>%
    dplyr::left_join(meta_data_covariates, by="subject_id")

  set.seed(42)
  
  get_oob_perf(model_df=model_df) %>% 
    dplyr::mutate(mse = round(mse, 2), r2 = round(r2, 2), srho = round(srho, 2)) %>%
    make_flextable(.)
  
  get_loocv_perf(model_df=model_df) %>% 
    dplyr::mutate(mse = round(mse, 2), r2 = round(r2, 2), srho = round(srho, 2)) %>%
    make_flextable(.)
    
  # get_cross_cohort_perf_combinations(model_df=model_df, meta_data=meta_data) %>%
  #   dplyr::mutate(mse = round(mse, 2), r2 = round(r2, 2)) %>%
  # make_flextable(.)
    
  get_cross_cohort_perf_single(model_df=model_df, meta_data=meta_data) %>%
    dplyr::mutate(mse = round(mse, 2), r2 = round(r2, 2),
                  srho = round(srho, 2), srho_baseline = round(srho_baseline, 2),
                  mse_tmean = round(mse_tmean, 2)) %>%
    make_flextable(.)
  
  cat("\n\n")
}
```

```{r}

```

