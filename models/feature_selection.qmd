---
title: "Single-Omic Models After Normalization"
author: "Philipp Sven Lars Sch√§fer"
date: "`r format(Sys.time(), '%d %B, %Y')`"
editor: source
engine: knitr
---

# Packages

```{r}
suppressPackageStartupMessages({
  library(tidyverse)
  library(flextable)
  library(ggdark)
  library(magick)
})

source(file.path("..", "src", "read_data.R"))
source(file.path("..", "src", "colors.R"))
source(file.path("..", "src", "generate_targets.R"))
source(file.path("..", "src", "model.R"))
```

# Data

```{r}
input_dir = file.path("..", "data")
```

```{r}
celltype_meta <- read_celltype_meta(input_dir)
gene_meta <- read_gene_meta_plus(input_dir)
protein_meta <- read_protein_meta(input_dir)

meta_data <- read_harmonized_meta_data(input_dir)
specimen_per_day <- get_specimen_per_day(meta_data=meta_data)

RECOMPUTE <- FALSE
if (RECOMPUTE) {
  experimental_data <- read_raw_experimental_data(input_dir)
  experimental_data <- filter_experimental_data(meta_data=meta_data, 
                                                experimental_data=experimental_data)
  experimental_data <- normalize_experimental_data(meta_data=meta_data, 
                                                   experimental_data=experimental_data,
                                                   gene_meta=gene_meta)
  write_rds(experimental_data, 
            file = file.path(input_dir, "prc_datasets", 
                             "normalized_experimental_data.RDS"))
} else {
  experimental_data <- read_rds(file = file.path(input_dir, "prc_datasets", 
                                                 "normalized_experimental_data.RDS"))
}
experimental_data <- 
  experimental_data[-which(names(experimental_data) == "pbmc_gene_expression_raw")]

experimental_predictors <- generate_wide_experimental_data(experimental_data=experimental_data,
                                                            impute="median", 
                                                            verbose=TRUE)

hvg <- gene_meta %>% 
  dplyr::slice_max(mean_rank, n=1000)
experimental_predictors$pbmc_gene_expression <- 
  experimental_predictors$pbmc_gene_expression[, hvg$gene_symbol]

raw_experimental_data <- read_raw_experimental_data(input_dir)
raw_experimental_data <- filter_experimental_data(meta_data=meta_data, 
                                                  experimental_data=raw_experimental_data)
```

To create the target tracks, I must use the non-normalized / non-integrated data as I don't have this information either for the challenge dataset

```{r}
target_list <- generate_all_targets(
  meta_data=meta_data, 
  experimental_data=raw_experimental_data, 
  experimental_data_settings=experimental_data_settings, 
  gene_meta=gene_meta)
str(target_list)
```

# Task 1.1

```{r}
target_list$task_11
```








