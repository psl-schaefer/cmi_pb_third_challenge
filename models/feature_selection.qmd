---
title: "Single-Omic Models After Normalization"
author: "Philipp Sven Lars Sch√§fer"
date: "`r format(Sys.time(), '%d %B, %Y')`"
editor: source
engine: knitr
---

# Packages

```{r}
suppressPackageStartupMessages({
  library(tidyverse)
  library(flextable)
  library(ggdark)
  library(magick)
})

source(file.path("..", "src", "read_data.R"))
source(file.path("..", "src", "colors.R"))
source(file.path("..", "src", "generate_targets.R"))
source(file.path("..", "src", "model.R"))
```

# Data

```{r}
input_dir = file.path("..", "data")
```

```{r}
celltype_meta <- read_celltype_meta(input_dir)
gene_meta <- read_gene_meta_plus(input_dir)
protein_meta <- read_protein_meta(input_dir)

meta_data <- read_harmonized_meta_data(input_dir)
specimen_per_day <- get_specimen_per_day(meta_data=meta_data)

RECOMPUTE <- FALSE
if (RECOMPUTE) {
  source(file.path("..", "src", "normalize_integrate.R"))
  experimental_data <- read_raw_experimental_data(input_dir)
  experimental_data <- filter_experimental_data(meta_data=meta_data, 
                                                experimental_data=experimental_data,
                                                gene_meta=gene_meta)
  experimental_data <- normalize_experimental_data(meta_data=meta_data, 
                                                   experimental_data=experimental_data,
                                                   gene_meta=gene_meta)
  write_rds(experimental_data, 
            file = file.path(input_dir, "prc_datasets", 
                             "normalized_experimental_data.RDS"))
} else {
  experimental_data <- read_rds(file = file.path(input_dir, "prc_datasets", 
                                                 "normalized_experimental_data.RDS"))
}
experimental_data <- 
  experimental_data[-which(names(experimental_data) == "pbmc_gene_expression_raw")]

experimental_predictors <- generate_wide_experimental_data(experimental_data=experimental_data,
                                                            impute="median", 
                                                            verbose=TRUE)

hvg <- gene_meta %>% 
  dplyr::slice_max(mean_rank, n=1000)
experimental_predictors$pbmc_gene_expression <- 
  experimental_predictors$pbmc_gene_expression[, hvg$versioned_ensembl_gene_id_clean]
```

```{r}
# use non-normalized / non-integrated data to create the target track
# since I don't have this information for the challenge dataset either
raw_experimental_data <- read_raw_experimental_data(input_dir)
raw_experimental_data <- filter_experimental_data(meta_data=meta_data, 
                                                  experimental_data=raw_experimental_data, 
                                                  gene_meta=gene_meta)

target_list <- generate_all_targets(
  meta_data=meta_data, 
  experimental_data=raw_experimental_data, 
  experimental_data_settings=experimental_data_settings, 
  gene_meta=gene_meta)
str(target_list)
```

```{r}
task_meta <- list(
  task_11 = list(
    name = "task_11",
    header = "## Task 1.1",
    description = "Rank the individuals by IgG antibody levels against pertussis toxin (PT) that we detect in plasma 14 days post booster vaccinations."
  ),
  task_12 = list(
    name = "task_12",
    header = "## Task 1.2",
    description = "Rank the individuals by fold change of IgG antibody levels against pertussis toxin (PT) that we detect in plasma 14 days post booster vaccinations compared to titer values at day 0."
  ),
  task_21 = list(
    name = "task_21",
    header = "## Task 2.1",
    description = "Rank the individuals by predicted frequency of Monocytes on day 1 post boost after vaccination."
  ),
  task_22 = list(
    name = "task_22",
    header = "## Task 2.2",
    description = "Rank the individuals by fold change of predicted frequency of Monocytes on day 1 post booster vaccination compared to cell frequency values at day 0."
  ),
  task_31 = list(
    name = "task_31",
    header = "## Task 3.1",
    description = "Rank the individuals by predicted gene expression of CCL3 on day 3 post-booster vaccination."
  ),
  task_32 = list(
    name = "task_32",
    header = "## Task 3.2",
    description = "Rank the individuals by fold change of predicted gene expression of CCL3 on day 3 post booster vaccination compared to gene expression values at day 0."
  )
)
```

# Task 1.1

```{r}
task <- task_meta[[1]]
```

```{r}
target_list[[task$name]]
```

```{r}
modality_data <- experimental_predictors$pbmc_gene_expression %>%
  as.data.frame() %>% 
  tibble::rownames_to_column("specimen_id") %>%
  dplyr::mutate(specimen_id = as.numeric(specimen_id)) %>%
  dplyr::left_join((specimen_per_day$day_0 %>% dplyr::select(subject_id, specimen_id)),
                   by="specimen_id") %>%
  dplyr::filter(!is.na(subject_id)) %>%
  dplyr::select(-specimen_id)

modality_data
```

```{r}
model_df <- target_list[[task$name]] %>%
  dplyr::left_join(modality_data, by="subject_id") %>%
   tidyr::drop_na()
model_df
```

```{r}
library(Boruta)
boruta_test <- Boruta::Boruta(target ~ .,
                              model_df %>% dplyr::select(-subject_id),
                              maxRuns=10000,
                              num.trees=1000 # use more trees to be sure?
                              )
boruta_test
```

```{r}
#plot(boruta_test)
```



