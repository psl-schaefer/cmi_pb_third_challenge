---
title: "Single-Omic Models After Normalization"
author: "Philipp Sven Lars Sch√§fer"
date: "`r format(Sys.time(), '%d %B, %Y')`"
editor: source
engine: knitr
---

# Packages

```{r}
suppressPackageStartupMessages({
  library(tidyverse)
  library(flextable)
  library(ggdark)
  library(magick)
})

source(file.path("..", "src", "read_data.R"))
source(file.path("..", "src", "colors.R"))
source(file.path("..", "src", "generate_targets.R"))
source(file.path("..", "src", "model.R"))
```

# Data

```{r}
input_dir = file.path("..", "data")
```

```{r}
celltype_meta <- read_celltype_meta(input_dir)
gene_meta <- read_gene_meta(input_dir)
protein_meta <- read_protein_meta(input_dir)

meta_data <- read_harmonized_meta_data(input_dir)
specimen_per_day <- get_specimen_per_day(meta_data=meta_data)

RECOMPUTE <- FALSE
if (RECOMPUTE) {
  experimental_data <- read_raw_experimental_data(input_dir)
  experimental_data <- filter_experimental_data(meta_data=meta_data, 
                                                experimental_data=experimental_data)
  experimental_data <- normalize_experimental_data(meta_data=meta_data, 
                                                   experimental_data=experimental_data,
                                                   gene_meta=gene_meta)
  write_rds(experimental_data, 
            file = file.path(input_dir, "prc_datasets", 
                             "normalized_experimental_data.RDS"))
} else {
  experimental_data <- read_rds(file = file.path(input_dir, "prc_datasets", 
                                                 "normalized_experimental_data.RDS"))
}
raw_experimental_data <- read_raw_experimental_data(input_dir)
raw_experimental_data <- filter_experimental_data(meta_data=meta_data, 
                                                  experimental_data=raw_experimental_data)

specimen_per_day <- get_specimen_per_day(meta_data=meta_data)
```

```{r}
gex_df <- raw_experimental_data$pbmc_gene_expression %>%
  dplyr::left_join((meta_data %>% dplyr::select(specimen_id, dataset)),
                    by="specimen_id")

gex_df_overall <- gex_df %>%
  dplyr::group_by(dataset, versioned_ensembl_gene_id) %>%
  dplyr::summarise(mean_tpm = mean(tpm), var_tpm = var(tpm), .groups="drop_last") %>%
  dplyr::mutate(rank = rank(mean_tpm, na.last=TRUE)) %>%
  dplyr::ungroup() %>%
  dplyr::mutate(disp = var_tpm / mean_tpm) %>%
  dplyr::arrange(versioned_ensembl_gene_id, dataset)

gex_df_baseline <- gex_df %>%
  dplyr::filter(specimen_id %in% specimen_per_day$day_0$specimen_id) %>%
  dplyr::group_by(dataset, versioned_ensembl_gene_id) %>%
  dplyr::summarise(mean_tpm = mean(tpm), var_tpm = var(tpm), .groups="drop_last") %>%
  dplyr::mutate(rank = rank(mean_tpm, na.last=TRUE)) %>%
  dplyr::ungroup() %>%
  dplyr::mutate(disp = var_tpm / mean_tpm) %>%
  dplyr::arrange(versioned_ensembl_gene_id, dataset)
```

- Check to what extend the rank agree between the datasets

```{r}
rank_corr_overall <- purrr::map(unique(gex_df_overall$dataset), function(d1) {
  purrr::map(unique(gex_df_overall$dataset), function(d2) {
    tibble(d1=d1, 
           d2=d2, 
           rho = cor(x=gex_df_overall$mean_tpm[gex_df_overall$dataset==d1],
                     y=gex_df_overall$mean_tpm[gex_df_overall$dataset==d2], 
                     method="pearson"),
           srho = cor(x=gex_df_overall$mean_tpm[gex_df_overall$dataset==d1],
                      y=gex_df_overall$mean_tpm[gex_df_overall$dataset==d2], 
                      method="spearman")
    )
  }) %>%
    dplyr::bind_rows()
}) %>%
  dplyr::bind_rows()

rank_corr_baseline <- purrr::map(unique(gex_df_overall$dataset), function(d1) {
  purrr::map(unique(gex_df_overall$dataset), function(d2) {
    tibble(d1=d1, 
           d2=d2, 
           rho = cor(x=gex_df_baseline$mean_tpm[gex_df_baseline$dataset==d1],
                     y=gex_df_baseline$mean_tpm[gex_df_baseline$dataset==d2], 
                     method="pearson"),
           srho = cor(x=gex_df_baseline$mean_tpm[gex_df_baseline$dataset==d1],
                      y=gex_df_baseline$mean_tpm[gex_df_baseline$dataset==d2], 
                      method="spearman")
    )
  }) %>%
    dplyr::bind_rows()
}) %>%
  dplyr::bind_rows()
```

Select genes with the top x mean rank

```{r}
gene_subset <- gex_df_overall %>%
  dplyr::group_by(versioned_ensembl_gene_id) %>%
  dplyr::summarise(mean_disp = mean(disp),
                   median_disp = median(disp),
                   mean_rank = mean(rank)) %>%
  dplyr::arrange(desc(mean_rank)) %>%
  dplyr::slice_max(order_by=mean_rank, n=2000) %>%
  dplyr::left_join(gene_meta, by="versioned_ensembl_gene_id")

gene_subset
```



