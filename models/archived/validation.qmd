---
title: "Validation Test"
author: "Philipp Sven Lars Sch√§fer"
date: "`r format(Sys.time(), '%d %B, %Y')`"
editor: source
engine: knitr
---

# Packages

```{r}
suppressPackageStartupMessages({
  library(tidyverse)
  library(flextable)
  library(ggdark)
  library(magick)
  source(file.path("..", "src", "read_data.R"))
  source(file.path("..", "src", "colors.R"))
  source(file.path("..", "src", "generate_targets.R"))
  source(file.path("..", "src", "model.R"))
})

```

# Data

```{r}
input_dir = file.path("..", "data")
```

```{r}
celltype_meta <- read_celltype_meta(input_dir)
gene_meta <- read_gene_meta_plus(input_dir)
protein_meta <- read_protein_meta(input_dir)

meta_data <- read_harmonized_meta_data(input_dir)
specimen_per_day <- get_specimen_per_day(meta_data=meta_data)

RECOMPUTE <- FALSE
if (RECOMPUTE) {
  source(file.path("..", "src", "normalize_integrate.R"))
  
  raw_experimental_data <- read_raw_experimental_data(input_dir)
  
  filtered_experimental_data <- filter_experimental_data(
    meta_data=meta_data, 
    experimental_data=raw_experimental_data,
    gene_meta=gene_meta)
  
  write_rds(filtered_experimental_data, 
            file = file.path(input_dir, "prc_datasets", 
                             "filtered_experimental_data.RDS"))
  
  normalized_experimental_data <- normalize_experimental_data(
    meta_data=meta_data, 
    raw_experimental_data=filtered_experimental_data,
    gene_meta=gene_meta)
  
  write_rds(normalized_experimental_data, 
            file = file.path(input_dir, "prc_datasets", 
                             "normalized_experimental_data.RDS"))
  
  integrated_experimental_data <- integrate_experimental_data(
    meta_data=meta_data, 
    normalized_experimental_data=normalized_experimental_data)
  
  write_rds(integrated_experimental_data, 
            file = file.path(input_dir, "prc_datasets", 
                             "integrated_experimental_data.RDS"))

  # use raw/filtered experimental data for computation of targets
  target_list <- generate_all_targets(
    meta_data=meta_data, 
    experimental_data=filtered_experimental_data, 
    experimental_data_settings=experimental_data_settings, 
    gene_meta=gene_meta,
    protein_meta=protein_meta
    )
  
  write_rds(target_list, 
          file = file.path(input_dir, "prc_datasets", 
                           "target_list.RDS"))
  
  rm(raw_experimental_data, filtered_experimental_data)
  experimental_data <- integrated_experimental_data
} else {
  experimental_data <- read_rds(file = file.path(input_dir, "prc_datasets", 
                                                            "integrated_experimental_data.RDS"))
  experimental_data <- experimental_data[-which(names(experimental_data) ==
                                                "pbmc_gene_expression_counts")]
  target_list <- read_rds(file = file.path(input_dir, "prc_datasets", 
                                           "target_list.RDS"))
}
```

# Conclusions

- For tasks 1.1, 2.1, 3.1, 4.1 the prediction based on baseline is pretty good

- For task 1.2, (-1) times the baseline seems to be a super good predictors

- In tasks 1.2, 2.2, 3.2 my models looks pretty shitty

# Construct Feature Matrix

```{r}
df_boruta <- read_rds(file = file.path(input_dir, "prc_datasets", 
                                       "df_boruta.RDS")) %>%
  dplyr::mutate(modality_feature = paste0(modality, "_", feature))

boruta_features <- unique(df_boruta$modality_feature)

experimental_predictors <- generate_wide_experimental_data(experimental_data=experimental_data,
                                                           impute="median", 
                                                           verbose=TRUE) %>%
  purrr::imap(function(df, modality) {
    colnames(df) <- paste0(modality, "_", colnames(df))
    df
  })

all_specimens <- purrr::map(experimental_predictors, ~ rownames(.x)) %>% 
  purrr::reduce(.x=., .f=dplyr::union)

all_features <- purrr::map(experimental_predictors, ~ colnames(.x)) %>% 
  purrr::reduce(.x=., .f=dplyr::union)

feature_mtx <- matrix(data=NA, nrow=length(all_specimens), ncol=length(all_features))
rownames(feature_mtx) <- all_specimens; colnames(feature_mtx) <- all_features

for (modality_data in experimental_predictors) {
  feature_mtx[rownames(modality_data), colnames(modality_data)] <-
    modality_data
}

stopifnot(all(boruta_features %in% colnames(feature_mtx)))
specimen_day_0 <- as.character(specimen_per_day$day_0$specimen_id)[
  as.character(specimen_per_day$day_0$specimen_id) %in% rownames(feature_mtx)]
feature_mtx <- feature_mtx[specimen_day_0, boruta_features]

str(feature_mtx)
feature_mtx <- feature_mtx[rowMeans(is.na(feature_mtx)) < 0.5, ]
str(feature_mtx)
feature_mtx <- t(impute::impute.knn(data=t(feature_mtx))$data)
str(feature_mtx)

feature_df <- feature_mtx %>%
  as.data.frame() %>%
  tibble::rownames_to_column("specimen_id") %>%
  dplyr::mutate(specimen_id = as.numeric(specimen_id)) %>%
  dplyr::left_join((specimen_per_day$day_0 %>% 
                      dplyr::select(subject_id, specimen_id, dataset)),
                   by="specimen_id") %>%
  dplyr::select(-c(specimen_id, dataset))
stopifnot(!any(is.na(feature_df$subject_id)))
```

# Tasks

```{r}
task_meta <- list(
  task_11 = list(
    name = "task_11",
    header = "## Task 1.1",
    description = "Rank the individuals by IgG antibody levels against pertussis toxin (PT) that we detect in plasma 14 days post booster vaccinations."
  ),
  task_12 = list(
    name = "task_12",
    header = "## Task 1.2",
    description = "Rank the individuals by fold change of IgG antibody levels against pertussis toxin (PT) that we detect in plasma 14 days post booster vaccinations compared to titer values at day 0."
  ),
  task_21 = list(
    name = "task_21",
    header = "## Task 2.1",
    description = "Rank the individuals by predicted frequency of Monocytes on day 1 post boost after vaccination."
  ),
  task_22 = list(
    name = "task_22",
    header = "## Task 2.2",
    description = "Rank the individuals by fold change of predicted frequency of Monocytes on day 1 post booster vaccination compared to cell frequency values at day 0."
  ),
  task_31 = list(
    name = "task_31",
    header = "## Task 3.1",
    description = "Rank the individuals by predicted gene expression of CCL3 on day 3 post-booster vaccination."
  ),
  task_32 = list(
    name = "task_32",
    header = "## Task 3.2",
    description = "Rank the individuals by fold change of predicted gene expression of CCL3 on day 3 post booster vaccination compared to gene expression values at day 0."
  ),
  task_41 = list(
    name = "task_41",
    header = "## Task 4.1",
    description = "Rank the individuals based on their Th1/Th2 (IFN-g/IL-5) polarization ratio on Day 30 post-booster vaccination."
  )
)
```

# Loop

```{r}
get_cross_cohort_perf_combinations <- function(model_df, meta_data, nobase=FALSE) {
  stopifnot(all(c("target", "subject_id", "baseline") %in% colnames(model_df)))
  
  model_dataset_df <- model_df %>%
    dplyr::left_join(meta_data %>% 
                       dplyr::select(subject_id, dataset) %>%
                       dplyr::distinct(),
                     by="subject_id")
  
  all_datasets <- unique(model_dataset_df$dataset)
  
  cross_dataset_out <- purrr::map(all_datasets, function(test_dataset) {
    # test_dataset <- all_datasets[1]
    train_dataset <- all_datasets[!all_datasets %in% test_dataset]
    
    train_df <- model_dataset_df %>%
      dplyr::filter(dataset %in% train_dataset) %>%
      dplyr::select(-c(dataset, subject_id))
    
    test_df <- model_dataset_df %>%
      dplyr::filter(dataset %in% test_dataset) %>%
      dplyr::select(-c(dataset, subject_id))
    
    if (nobase) {
      train_df <- train_df %>% dplyr::select(-baseline)
    }
    model <- ranger::ranger(formula = target ~ ., 
                            data = train_df, 
                            num.trees = 500)
    predictions <- predict(model, test_df)$predictions
    tibble::tibble(trainset = paste0(train_dataset, collapse="__"),
                   testset = test_dataset,
                   target = test_df$target, 
                   prediction = predictions,
                   baseline = test_df$baseline,
                   testset_mean = mean(test_df$target))
  }) %>%
    dplyr::bind_rows()
  
  # cross_dataset_out %>%
  #   ggplot() +
  #   geom_point(aes(x=prediction, y=target)) +
  #   ggdark::dark_mode(verbose=FALSE)
  
  cross_dataset_out %>%
    dplyr::group_by(trainset, testset) %>%
    dplyr::summarise(
      test_mse = get_mse(target, prediction),
      test_r2 = get_r2(target, prediction),
      test_srho = get_spearman(target, prediction),
      baseline_srho = get_spearman(target, baseline),
      mse_same_cohort = get_mse(target, testset_mean),
      .groups = "drop"
    )
}

get_cross_cohort_perf_combinations_repeated <- function(model_df, meta_data, 
                                                        n_iter=25, nobase=FALSE) {
  # TODO
  df_long <- purrr::map(1:n_iter, function(iter) {
    get_cross_cohort_perf_combinations(model_df=model_df, meta_data=meta_data, 
                                       nobase=nobase) %>%
      dplyr::mutate(iteration=iter)
  }) %>%
    dplyr::bind_rows()
  df_out <- df_long %>%
    dplyr::group_by(trainset, testset) %>%
    dplyr::summarise(test_srho_mean = mean(test_srho),
                     test_srho_sd = sd(test_srho),
                     baseline_srho_mean = mean(baseline_srho),
                     .groups = "drop")
  return(df_out)
}
```


```{r}
permute_columns <- function(mtx, seed=42) {
  set.seed(42)
  for (col_idx in 1:ncol(mtx)) {
    mtx[, col_idx] <- sample(mtx[, col_idx], size=nrow(mtx), replace=TRUE)
  }
  return(mtx)
}

tibble_list <- list()

metadata_covariates <- get_metadata_covariates(meta_data)

model_list <- list(
  "metadata" = metadata_covariates,
  "features" = feature_df,
  "features_permuted" = permute_columns(feature_df),
  "features_permuted_nobase" = permute_columns(feature_df),
  "metadata_plus_features" = feature_df %>% 
    dplyr::left_join(metadata_covariates, by="subject_id")
)

for (task in task_meta) {
  # task <- task_meta[[3]]
  
  for (model_name in names(model_list)) {
    # model_name <- "features_permuted"
    #print(model_name)
    
    model_df <- target_list[[task$name]] %>%
      dplyr::left_join(model_list[[model_name]], by="subject_id") %>%
      tidyr::drop_na()
    
    if (model_name == "features_permuted_nobase") {
      nobase <- TRUE
    } else {
      nobase <- FALSE
    }
    
    task_df <- get_cross_cohort_perf_combinations_repeated(model_df=model_df,
                                                           meta_data=meta_data, 
                                                           nobase=nobase) %>%
      dplyr::mutate(task = task$name, model = model_name) %>%
      dplyr::mutate(across(.cols=c(test_srho_mean, test_srho_sd, baseline_srho_mean),
                           .fns=~round(.x, 2))) 
    tibble_list <- rlist::list.append(tibble_list, task_df)
  }
  
}

df <- dplyr::bind_rows(tibble_list) %>%
    dplyr::mutate(
      task = factor(task, levels=paste0(rep(paste0("task_", 1:4), each=2), rep(1:2, 4))),
      model = factor(model, levels=names(model_list))
      )
df
```

```{r fig.width=10, fig.height=6}
df %>%
  dplyr::select(-test_srho_sd) %>%
  tidyr::pivot_longer(cols=c(test_srho_mean, baseline_srho_mean),
                      names_to="metric", values_to="value") %>%
  ggplot() +
  geom_vline(xintercept=c(0, 0.5), color="grey", linetype="dashed") +
  geom_point(aes(y=task, x=value, color=testset, shape=metric), alpha=0.50) +
  ggdark::dark_mode(verbose=TRUE) +
  facet_wrap(~model)
```

